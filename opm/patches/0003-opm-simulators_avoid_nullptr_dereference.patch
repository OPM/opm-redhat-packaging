diff --git a/opm/simulators/linalg/ISTLSolver.cpp b/opm/simulators/linalg/ISTLSolver.cpp
index 705cc08eb..9734fe9a7 100644
--- a/opm/simulators/linalg/ISTLSolver.cpp
+++ b/opm/simulators/linalg/ISTLSolver.cpp
@@ -81,13 +81,13 @@ void FlexibleSolverInfo<Matrix,Vector,Comm>::create(const Matrix& matrix,
                                                     std::size_t pressureIndex,
                                                     std::function<Vector()> weightsCalculator,
                                                     const bool forceSerial,
-                                                    [[maybe_unused]] Comm& comm)
+                                                    [[maybe_unused]] Comm* comm)
 
 {
     // Write sizes of linear systems on all ranks to debug log.
     if (!forceSerial) {
 #if HAVE_MPI
-        auto basic_comm = comm.communicator();
+        auto basic_comm = comm->communicator();
 #else
         auto basic_comm = Dune::Communication<Dune::No_Comm>{};
 #endif // HAVE_MPI
@@ -112,9 +112,9 @@ void FlexibleSolverInfo<Matrix,Vector,Comm>::create(const Matrix& matrix,
 #if HAVE_MPI
         if (!wellOperator_) {
             using ParOperatorType = Opm::GhostLastMatrixAdapter<Matrix, Vector, Vector, Comm>;
-            auto pop = std::make_unique<ParOperatorType>(matrix, comm);
+            auto pop = std::make_unique<ParOperatorType>(matrix, *comm);
             using FlexibleSolverType = Dune::FlexibleSolver<ParOperatorType>;
-            auto sol = std::make_unique<FlexibleSolverType>(*pop, comm, prm,
+            auto sol = std::make_unique<FlexibleSolverType>(*pop, *comm, prm,
                                                             weightsCalculator,
                                                             pressureIndex);
             this->pre_ = &sol->preconditioner();
@@ -125,7 +125,7 @@ void FlexibleSolverInfo<Matrix,Vector,Comm>::create(const Matrix& matrix,
             auto pop = std::make_unique<ParOperatorType>(matrix, *wellOperator_,
                                                          interiorCellNum_);
             using FlexibleSolverType = Dune::FlexibleSolver<ParOperatorType>;
-            auto sol = std::make_unique<FlexibleSolverType>(*pop, comm, prm,
+            auto sol = std::make_unique<FlexibleSolverType>(*pop, *comm, prm,
                                                             weightsCalculator,
                                                             pressureIndex);
             this->pre_ = &sol->preconditioner();
diff --git a/opm/simulators/linalg/ISTLSolver.hpp b/opm/simulators/linalg/ISTLSolver.hpp
index 45deee733..529cb87d0 100644
--- a/opm/simulators/linalg/ISTLSolver.hpp
+++ b/opm/simulators/linalg/ISTLSolver.hpp
@@ -105,7 +105,7 @@ struct FlexibleSolverInfo
                 std::size_t pressureIndex,
                 std::function<Vector()> weightCalculator,
                 const bool forceSerial,
-                Comm& comm);
+                Comm* comm);
 
     std::unique_ptr<AbstractSolverType> solver_;
     std::unique_ptr<AbstractOperatorType> op_;
@@ -513,7 +513,7 @@ std::unique_ptr<Matrix> blockJacobiAdjacency(const Grid& grid,
                                                          pressureIndex,
                                                          weightCalculator,
                                                          forceSerial_,
-                                                         *comm_);
+                                                         comm_.get());
             }
             else
             {
